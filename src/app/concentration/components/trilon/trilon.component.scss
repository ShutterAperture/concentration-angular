$narz-transition: 1s;
// The trilons "rotate" around a center point. The trilons are tranlated backwards to the centerpoint,
// while the faces are translated forward the same amount so they are back at the main plane
$center-point3D-sm: 21.675px;
$center-point3D-std: 28.9px;
$center-point3D-lg: 43.35px;

$narz-red: rgb(159,39,19);
$rarz-gold: rgb(236,190,110);
$narz-letter: rgb(166,83,21);

$transform-transition: .7s;

:host {
  --trilon-width: 98px;
  --trilon-height: 63px;

  @media only screen and (max-width: 600px) {
    --trilon-width: 60px;
    --trilon-height: 39px;
  }

  @media only screen and (min-width: 1500px) {
    --trilon-width: 147px;
    --trilon-height: 94px;
  }
}


@mixin trilonStates($centerPoint) {
  transform: translateZ(-$centerPoint);
  &.state-prize {
    transform: translateZ(-$centerPoint) rotateY(-120deg);
  }

  &.state-puzzle {
    transform: translateZ(-$centerPoint) rotateY(-240deg);
  }
}

@mixin trilonFaces($centerPoint) {
  .num {
    transform: translateZ($centerPoint);
  }

  .prize {
    transform: rotateY(120deg) translateZ($centerPoint);
  }

  .pzl {
    transform: rotateY(-120deg) translateZ($centerPoint);
  }
}

@mixin generatePlacements($height, $width, $offset) {
  // vertical placement
  @for $i from 0 through 5 {
    &.row#{$i} {
      top: $offset + ($i * $height);
    }
  }

  // horizontal placement
  @for $i from 0 through 4 {
    &.col#{$i} {
      left: $offset + ($i * $width);
    }
  }
}





:host {
  flex: 0 0 var(--trilon-width);
  width: var(--trilon-width);
  height: var(--trilon-height);
  transform-style: preserve-3d;
  backface-visibility: hidden;

  &.narz {
    .trilon .num {
      background: $narz-red;

      .inner {
        margin: 9px 12px;
        height: 45px;
        background: $rarz-gold;
        font-weight: 700;
        font-size: 2.4em;
        line-height: 1.1;
        color: $narz-letter;

        @media only screen and (max-width: 600px) {
          margin: 6px 6px;
          height: 27px;
          font-size: 1.6em;
          line-height: 1;
        }
        @media screen and (min-width: 1500px) {
          margin: 12px 16px;
          height: 67px;
          font-size: 3.6em;
        }
      }
    }
  }

  &.blumenthal {
    .pzl {
      filter: grayscale(1) invert(1) contrast(1.4);
    }
  }

  // We turn off transitions so we can change the number rotation from 0deg to 360 deg
  // without seeing any spinning. The rotation allows the puzzle reset to turn in the
  // opposite direction.

  &.inhibit {
    .trilon {
      transition: none;
    }
  }

  &.exposeReady {
    .trilon.state-number {
      transform: translateZ(-$center-point3D-std) rotateY(-360deg);
    }

    .num {
      transform: translateZ($center-point3D-std);
      // Leaving here for diagnostic purposes - makes state visible
      //.inner {
      //  background: #101010;
      //}
    }
  }
}

.trilon {
  width: var(--trilon-width);
  height: var(--trilon-height);
  transform-style: preserve-3d;
  transition: transform $transform-transition ease-in-out;

  @include trilonStates($center-point3D-std);

  .inner {
    transform-style: preserve-3d;
  }

  .face {
    position: absolute;
    cursor: pointer;
    width: inherit;
    height: inherit;
    vertical-align: middle;
    text-align: center;
    backface-visibility: hidden;

  }
} // end, trilon

@include trilonFaces($center-point3D-std);

.num {
  background: #DEBE4E;
  transition: background-color $narz-transition;

  .inner {
    margin: 12px 16px;
    height: 39px;
    font: 700 1.6em 'Open Sans', sans-serif;
    line-height: 1.4;
    background: #A3211B;
    color: #FFF;
    transition: all $narz-transition;
  }
}

.prize {

  .inner {
    display: table-cell;
    vertical-align: middle;
    width: inherit;
    height: inherit;
    font: 400 .95em 'Open Sans', sans-serif;
    color: #FFF;
    background: #181818;

    /* Take/Forfeit */
    .transfer {
      font-size: 1.3em;
      font-weight: 700;
      text-transform: uppercase;
    }

    &.wildcard {
      color: #F9CA2F;
      font-weight: 700;
      font-size: 1.3em;
      font-style: italic;
      line-height: 1.1;
      text-transform: uppercase;
    }
  }
}

.pzl {
  background: #FFF;
  color: #000;
  filter: grayscale(0) invert(0);
  background-size: 492px 390px;
  transition: transform $narz-transition, filter $narz-transition;
}

@media only screen and (max-width: 600px) {

  .trilon {
    @include trilonStates($center-point3D-sm);
  }

  @include trilonFaces($center-point3D-sm);

  .num {
    .inner {
      margin: 7px 9px;
      height: 25px;
      font: 700 1.2em 'Open Sans', sans-serif;
      line-height: 1.3;
    }
  }

  .prize {
    .inner {
      font-size: .65em;
      letter-spacing: -.05em;
      line-height: 1;

      /* Take/Forfeit */
      .transfer {
        font-size: 1.1em;
      }

      &.wildcard {
        color: #F9CA2F;
        font-weight: 700;
        font-size: 1em;
        font-style: italic;
        line-height: 1.1;
        text-transform: uppercase;
      }
    }
  }

  .pzl {
    background-size: 295px 234px;
  }
}

@media only screen and (min-width: 1500px) {
  .trilon {
    @include trilonStates($center-point3D-lg);
  }

  @include trilonFaces($center-point3D-lg);

  .num {
    .inner {
      margin: 18px 24px;
      height: 58px;
      font: 700 2.5em 'Open Sans', sans-serif;
      line-height: 1.3;
    }
  }

  .prize {
    .inner {
      font-size: 1.3em;
      padding: 0 10px;
      letter-spacing: -.05em;
      line-height: 1;

      /* Take/Forfeit */
      .transfer {
        font-size: 1.4em;
        line-height: 1.1;
      }

      &.wildcard {
        color: #F9CA2F;
        font-weight: 700;
        font-size: 1.95em;
        font-style: italic;
        line-height: 1.1;
        text-transform: uppercase;
      }
    }
  }

  .pzl {
    background-size: 745px 585px;
  }
}
